" windows上的配置
" 基本配置=============================================================
set nocompatible              " be iMproved, required
filetype off                  " required
set encoding=utf-8
set tabstop=4                 " 设置制表符长度
set softtabstop=4             " 设置软制表符
set shiftwidth=4              " 缩进长度
set number                    " 打开行号
syntax enable				  "开启语法高亮功能
syntax on
set t_Co=256				  "指定配色方案为256色
" 需要配合vimrc_example.vim注释一些代码
set nobackup				  "表示不需要备份文件
set noswapfile				  "表示不创建临时交换文件
set nowritebackup			  "表示编辑的时候不需要备份文件
set noundofile				  "表示不创建撤销文件

" 设置代码折叠为手动
set foldmethod=manual
"打开文件是默认不折叠代码
set foldlevelstart=99
" 基本配置=============================================================

" source $VIMRUNTIME/vimrc_example.vim

" vim-plug: Vim plugin manager
call plug#begin('$VIMRUNTIME/../plugged')

" 自动补全 此插件安装的时候需要手动编译
" https://github.com/ycm-core/YouCompleteMe
Plug 'Valloric/YouCompleteMe'   ",{'on':[]}			                 	
" augroup load_ycm
"     autocmd!
"     autocmd InsertEnter * call plug#load('YouCompleteMe') | autocmd! load_cmd
" augroup END

" nanotech/jellybeans.vim 主题插件
" 此插件优点是可以重载自定义的高亮
" https://github.com/nanotech/jellybeans.vim
Plug 'nanotech/jellybeans.vim'

" jonathanfilip/vim-lucius 主题插件
" https://github.com/jonathanfilip/vim-lucius
Plug 'jonathanfilip/vim-lucius'

" cormacrelf/vim-colors-github 主题插件
" https://github.com/cormacrelf/vim-colors-github
Plug 'cormacrelf/vim-colors-github'

" Yggdroot/LeaderF 模糊搜索插件
" https://github.com/Yggdroot/LeaderF
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

" scrooloose/nerdcommenter 注释插件
" https://github.com/preservim/nerdcommenter
Plug 'scrooloose/nerdcommenter'

" Plug 'scrooloose/nerdtree'                    							" 目录树
" Plug 'vim-airline/vim-airline'                							" 状态栏
" "Plug 'majutsushi/tagbar',{'on':'TagbarToggle'}						    " 标签插件 非C类禁用 tagbar 不然打开文件卡顿
" Plug 'kien/ctrlp.vim'					    							" 文件搜索
" Plug 'vim-airline/vim-airline-themes'									" 状态栏主题
" Plug 'godlygeek/tabular'												" -------------------
" Plug 'plasticboy/vim-markdown'											" Vim markdown语法插件
" Plug 'flazz/vim-colorschemes'               							" 代码高亮, 主题
" Plug 'hzchirs/vim-material'												" material主题
" Plug 'stephpy/vim-php-cs-fixer'											" php格式化
" Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }						" 搜索插件
" Plug 'vim-scripts/gtags.vim'											" gtags
" Plug 'vim-scripts/cscope.vim'											" cscope
" Plug 'whatot/gtags-cscope.vim'											
" Plug 'ludovicchabant/vim-gutentags'										" gtags辅助
call plug#end()

" 添加 http://github.com/tpope/vim-unimpaired 插件 用来补充一些映射



" cormacrelf/vim-colors-github 主题插件 配置
" Place before the colorscheme github
" use a slightly darker background, like GitHub inline code blocks
let g:github_colors_soft = 1

" use the dark theme / light
set background=dark

" more blocky diff markers in signcolumn (e.g. GitGutter)
let g:github_colors_block_diffmark = 0


" scheme 配置=========================================================
" colorscheme molokai
" colorscheme desert
" set background=light
" colorscheme vim-material
" colorscheme wombat
" colorscheme jellybeans													" 来自nanotech/jellybeans.vim
" colorscheme lucius														" 来自jonathanfilip/vim-lucius
colorscheme github															" 来自cormacrelf/vim-colors-github
" scheme 配置=========================================================


" jonathanfilip/vim-lucius 主题插件 配置
" LuciusBlackHighContrast


" nanotech/jellybeans.vim 主题插件 配置
" set guifont=Monaco:h10 noanti
" let g:jellybeans_use_gui_italics = 0									" 支持斜体



" nerdtree 配置========================================================
" nnoremap <silent> <F5> :NERDTree<CR>            " F5 开启
" nerdtree 配置========================================================

" YouCompleteMe 配置===================================================
let g:ycm_global_ycm_extra_conf = '$VIMRUNTIME/../.ycm_extra_conf.py' 				"此处是全局配置文件路径
let g:ycm_confirm_extra_conf = 0 													"关闭每次导入配置文件前的询问
" "let g:syntastic_always_populate_loc_list = 1 										"方便使用syntastic进行语法检查
let g:ycm_seed_identifiers_with_syntax=1 											"开启语法关键字补全
let g:ycm_add_preview_to_completeopt=0												"关闭补全预览
let g:ycm_seed_identifiers_with_syntax = 1											"标识符种子
let g:ycm_min_num_of_chars_for_completion = 1										"当按一个字符之后开始提示
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }																		"语义补全
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
"修改提示框颜色
highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black				
" 错误标记
let g:ycm_error_symbol = '✗'  "set error or warning signs
" warning标记
let g:ycm_warning_symbol = '⚠'



" "highlight YcmErrorSign       标记颜色
" "highlight YcmWarningSign ctermbg=none
" "highlight YcmErrorSection      代码中出错字段颜色
" highlight YcmWarningSection ctermbg=none
" "highlight YcmErrorLine        出错行颜色
" "highlight YcmWarningLine
" 
" " 跳转快捷键
" nnoremap <c-k> :YcmCompleter GoToDeclaration<CR>|
" nnoremap <c-h> :YcmCompleter GoToDefinition<CR>| 
" nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|
" " YouCompleteMe 配置===================================================
" 
" source $VIMRUNTIME/cscope_maps.vim
" 
" " gutentags 配置========================================================
" " gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 
" " 所生成的数据文件的名称
" let g:gutentags_ctags_tagfile = '.tags'
" 
" " 同时开启 ctags 和 gtags 支持：
" let g:gutentags_modules = []
" if executable('ctags')
" 	let g:gutentags_modules += ['ctags']
" endif
" if executable('gtags-cscope') && executable('gtags')
" 	let g:gutentags_modules += ['gtags_cscope']
" endif
" 
" " 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
" let g:gutentags_cache_dir = expand('~/.cache/tags')
" 
" " 配置 ctags 的参数
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 
" " 如果使用 universal ctags 需要增加下面一行
" let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
" 
" " 禁用 gutentags 自动加载 gtags 数据库的行为
" let g:gutentags_auto_add_gtags_cscope = 0
" " gutentags 配置========================================================
" 
" " Gtags 配置========================================================
" let $GTAGSLABEL = 'native-pygments'
" let $GTAGSCONF = 'D:/Program Files (x86)/Vim/extends/gtags/share/gtags/gtags.conf'
" " cscope
" set cscopetag                  " 使用 cscope 作为 tags 命令
" set cscopeprg=gtags-cscope   " 使用 gtags-cscope 代替 cscope
" 
" " gtags
" let GtagsCscope_Auto_Load = 1
" let CtagsCscope_Auto_Map = 1
" let GtagsCscope_Quiet = 1
" " Gtags 配置========================================================
" 


" Yggdroot/LeaderF 模糊搜索插件 配置
" 此插件需要 GNU GLOBAL(gtags) 的配合
" Windows下载地址 https://www.gnu.org/software/global/download.html
" 正则表达式/字符串检索 Leaderf rg ...
" ripgrep下载地址 https://github.com/BurntSushi/ripgrep/releases
" 需要安装ctags
" 下载地址 https://github.com/universal-ctags/ctags-win32/releases
" 以上安装后，均需要加入到环境变量中
" 以下是默认的配置
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1

" 气泡模式，就是在窗口中央弹出一个窗口
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
" let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
" let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

" 使用 ctrl + p 查找文件
let g:Lf_ShortcutF = '<c-p>'
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" gtags 数据库文件存储在$HOME/.LfCache/gtags/%PATH%OF%YOUR%PROJECT/
" should use `Leaderf gtags --update` first
" gtags是否自动生成
" 当代码有更改并且已经有 gtags 数据库生成时，更改的代码会自动同步到 gtags 数据库（即使g:Lf_GtagsAutoGenerate是0）
" 只有在项目根目录下有g:Lf_RootMarkers（默认值是['.git', '.hg', '.svn']）里面指定的文件或目录时，LeaderF 才会自动生成 gtags 数据库；
" 否则只能手动生成 gtags 数据库：Leaderf gtags --update，但是当代码有更改时，gtags 数据库依然可以自动更新。
" 用来指定 gtags.conf 文件的路径，一般情况下不需要指定，默认值就可以很好地工作。
" 对于Windows上，如果相对于gtags.exe所在路径有../share/gtags/gtags.conf，也不需要指定该选项。
" 如果需要用户自己特有的针对 gtags 的配置，可以指定用户的配置文件。
" 也可以在vimrc里设置g:Lf_Gtagsconf达到同样的目的
" 需要把 gtags.exe的所在路径加入环境变量 D:\Vim\plugged\glo665wb\bin
" 错误信息查看 :mess
" 当出现 gtags seems corrupted 时，可能是tags生成目录有文件，先删除了，再重新生成
let g:Lf_GtagsAutoGenerate = 1
" let g:Lf_Gtagsconf = '$VIMRUNTIME/../plugged/glo665wb/share/gtags/gtags.conf'

" 开启此功能时，需要python安装以下模块
" pip install pygments
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>



" " LeaderF 配置========================================================
" noremap <F2> :LeaderfFunction!<cr>           
" let g:Lf_Gtagsconf = 'D:/Program Files (x86)/Vim/extends/gtags/share/gtags/gtags.conf'
" " LeaderF 配置========================================================
" 
" 
" " airline theme 配置===================================================
" " let g:airline_theme='bubblegum'							" airline 主题
" let g:airline#extensions#tabline#enabled = 1			" smart tab line 开启
" " let g:airline_theme='material'
" " airline theme 配置===================================================
" 
" 
" " ====================================================================
" " 设置字体
" if has("gui_running")
" 	if has("gui_gtk2")
" 		set guifont=Inconsolata\ 12
"     elseif has("gui_macvim")
" 		set guifont=Menlo\ Regular:h14
" 	elseif has("gui_win32")
" 		set guifont=Consolas:h12:cANSI
" 		"set guifont=monaco:h11:cANSI
"     endif
" endif
" " ====================================================================
" 
" " Vim-php-cs-fixer 配置==================================================
" " If php-cs-fixer is in $PATH, you don't need to define line below
" let g:php_cs_fixer_path = "C:/wamp64/bin/php/php7.2.4/php-cs-fixer-v2.phar" " define the path to the php-cs-fixer.phar
" 
" " If you use php-cs-fixer version 1.x
" " let g:php_cs_fixer_level = "symfony"                   " options: --level (default:symfony)
" " let g:php_cs_fixer_config = "default"                  " options: --config
" " If you want to define specific fixers:
" "let g:php_cs_fixer_fixers_list = "linefeed,short_tag" " options: --fixers
" "let g:php_cs_fixer_config_file = '.php_cs'            " options: --config-file
" " End of php-cs-fixer version 1 config params
" 
" " If you use php-cs-fixer version 2.x
" let g:php_cs_fixer_rules = "@PSR2"          " options: --rules (default:@PSR2)
" "let g:php_cs_fixer_cache = ".php_cs.cache" " options: --cache-file
" "let g:php_cs_fixer_config_file = '.php_cs' " options: --config
" " End of php-cs-fixer version 2 config params
" 
" let g:php_cs_fixer_php_path = "php"               " Path to PHP
" let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
" let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
" let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.
" nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
" nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
" " =======================================================================

" " 窗口透明度 配置========================================================
" if has('gui_running') && has('libcall')
" 	let g:MyVimLib = $VIMRUNTIME.'/gvimfullscreen.dll'
" 	function ToggleFullScreen()
" 		call libcallnr(g:MyVimLib, "ToggleFullScreen", 0)
" 	endfunction
"     
" 	"Alt+Enter
" 	map <A-Enter> <Esc>:call ToggleFullScreen()<CR>
" 
" 	let g:VimAlpha = 240
" 	function! SetAlpha(alpha)
" 		let g:VimAlpha = g:VimAlpha + a:alpha
" 		if g:VimAlpha < 180
" 			let g:VimAlpha = 180
" 		endif
" 		if g:VimAlpha > 255
" 			let g:VimAlpha = 255
" 		endif
" 		call libcall(g:MyVimLib, 'SetAlpha', g:VimAlpha)
" 	endfunction
"     
" 	"Shift+Y
" 	nmap <s-y> <Esc>:call SetAlpha(3)<CR>
" 	"Shift+T
" 	nmap <s-t> <Esc>:call SetAlpha(-3)<CR>
" 
" 	function! SwitchVimAlpha()
" 		if g:VimAlpha != 180
" 			let g:VimAlpha = 180
" 		else
" 			let g:VimAlpha = 255
" 		endif
" 		call libcall(g:MyVimLib, 'SetAlpha', g:VimAlpha)
" 	endfunction
" 	" F8
" 	map <F8> :call SwitchVimAlpha()<CR>
" 
" 	let g:VimTopMost = 0
" 	function! SwitchVimTopMostMode()
" 		if g:VimTopMost == 0
" 			let g:VimTopMost = 1
" 		else
" 			let g:VimTopMost = 0
" 		endif
" 		call libcall(g:MyVimLib, 'EnableTopMost', g:VimTopMost)
" 	endfunction
"     
" 	"Shift+R
" 	nmap <s-r> <Esc>:call SwitchVimTopMostMode()<CR>
" endif

" 窗口透明度 配置========================================================


"
"
"You Complete Me 编译
"需要安装vim对应版本的python，查看方式为： :version
"安装 VS2017 或者 VS2015
"下载YCM插件源码后，如下命令编译插件：
"python install.py --clang-completer --msvc 16


